import telebot
import openpyxl
from telebot import types
import os
from datetime import datetime
import shutil

bot = telebot.TeleBot('Your token')


def load_workbook():
    global wb, sheet, order_sheet, users_chat_id
    wb = openpyxl.load_workbook(filename="database.xlsx", data_only=True)
    wb.active = 0
    sheet = wb.active
    order_sheet = wb['–ó–∞–∫–∞–∑—ã']
    users_chat_id = wb['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']


load_workbook()

user_catalog_position = {}
user_message_ids = {}
user_order_data = {}
admin_id = [] #your id
photo_dir = os.path.abspath('photo')
status_order=False

def user_exists(chat_id):
    for row in users_chat_id.iter_rows(min_row=2, max_col=1, values_only=True):
        if row[0] == chat_id:
            return True
    return False


@bot.message_handler(commands=['start'])
def start(message):
    global status_order
    status_order = False
    markup = types.InlineKeyboardMarkup()
    button_comment = types.InlineKeyboardButton("üí¨–û—Ç–∑—ã–≤—ã", url='https://t.me/agama_otz')
    button_support = types.InlineKeyboardButton("üîî–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/dtcaree')
    button_catalog = types.InlineKeyboardButton("üõí–ö–∞—Ç–∞–ª–æ–≥", callback_data='show_brands')
    button_search = types.InlineKeyboardButton("üîç–ü–æ–∏—Å–∫", callback_data='search_menu')
    markup.add(button_catalog, button_search)
    markup.add(button_comment, button_support)
    bot.send_message(message.chat.id,
                     f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! \n\n–ë–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ Agama.\n–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n–ü–æ –∑–∞–∫–∞–∑—É –∏ –≤–æ–ø—Ä–æ—Å–∞–º, –ø–∏—à–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª.',
                     reply_markup=markup)
    chat_id = message.chat.id
    if not user_exists(chat_id):
        username = message.from_user.username
        user_link = f"https://t.me/{username}" if username else "N/A"
        id_user_link = "https://web.telegram.org/k/#" + str(chat_id)
        users_chat_id.append([chat_id, user_link, id_user_link, message.chat.first_name, message.chat.last_name])
        wb.save("database.xlsx")


@bot.message_handler(commands=['get'])
def getdatabase(message):
    if message.chat.id in admin_id:
        bot.send_document(message.chat.id, open('database.xlsx', 'rb'))
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(commands=['upload'])
def upload_database(message):
    if message.chat.id in admin_id:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Excel).",
                               reply_markup=markup)
        bot.register_next_step_handler(msg, receive_new_database)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def receive_new_database(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return

    if message.chat.id in admin_id and message.document:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        backup_folder = 'Backup_database'
        if not os.path.exists(backup_folder):
            os.makedirs(backup_folder)

        current_time = datetime.now().strftime('day-%Y.%m.%d_time-%H.%M.%S')
        backup_path = os.path.join(backup_folder, f"database_backup_{current_time}.xlsx")
        os.rename('database.xlsx', backup_path)

        with open('database.xlsx', 'wb') as new_file:
            new_file.write(downloaded_file)

        load_workbook()
        bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–ø–∫—É –±—ç–∫–∞–ø–æ–≤.",
                         reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                         reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['list'])
def list_backups(message):
    if message.chat.id in admin_id:
        backup_folder = 'Backup_database'
        if not os.path.exists(backup_folder):
            os.makedirs(backup_folder)

        backups = os.listdir(backup_folder)
        if backups:
            backup_list = "\n".join(backups)
            bot.send_message(message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:\n{backup_list}")
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(commands=['backup'])
def restore_backup(message):
    if message.chat.id in admin_id:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
                               reply_markup=markup)
        bot.register_next_step_handler(msg, perform_restore_backup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def perform_restore_backup(message):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        return

    if message.chat.id in admin_id:
        backup_name = message.text
        backup_path = os.path.join('Backup_database', backup_name)

        if os.path.exists(backup_path):
            old_backup_name = f"database_old_{datetime.now().strftime('day-%Y.%m.%d_time-%H.%M.%S')}.xlsx"
            os.rename('database.xlsx', os.path.join('Backup_database', old_backup_name))
            shutil.copyfile(backup_path, 'database.xlsx')
            load_workbook()
            bot.send_message(message.chat.id, f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ {backup_name}.",
                             reply_markup=types.ReplyKeyboardRemove())
        else:
            bot.send_message(message.chat.id,
                             "–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                         reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=['help'])
def restore_backup(message):
    if message.chat.id in admin_id:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞\n/start —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –±–æ—Ç–∞\n/send —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞ (—Ç–µ, –∫—Ç–æ —Ö–æ—Ç—å —Ä–∞–∑ –≤–≤–æ–¥–∏—Ç /start)\n/get –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n/upload –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n/list —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–µ—Ç—Å—è)\n/backup –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—ç–∫–∞–ø –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö\n/new –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä")
        bot.send_message(message.chat.id, "–ï—Å—Ç—å 2 —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:\n1-–ß–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /new\n2-–í—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ø–∞–ø–∫—É photo –æ—Ç–∫—Ä—ã–≤ –Ω–∞ —Å–∞–π—Ç–µ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –ø–∞–ø–∫—É photo –∏ –∑–∞–∫–∏–Ω—É—Ç—å —Ç—É–¥–∞ —Ñ–æ—Ç–∫–∏ –≤—Ä—É—á–Ω—É—é. –ò –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—ç–∫—Å–µ–ª—å —Ç–∞–±–ª–∏—Ü—É), —ç—Ç–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª–∏–±–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (—Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–µ—à—å —Ç–∞–±–ª–∏—Ü—É /get, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ—à—å –≤ –Ω–µ—ë —Ç–æ–≤–∞—Ä—ã –∏ –∑–∞–∫–∏–¥—ã–≤–∞–µ—à—å –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /upload, –Ω–æ —É—á—Ç–∏ —á—Ç–æ –ø–æ–∫–∞ —Ç—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É, –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

admin_state = {}
admin_media = {}
@bot.message_handler(commands=['new'])
def add_new_product(message):
    if message.chat.id not in admin_id:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    user_order_data[message.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.", reply_markup=markup)
    bot.register_next_step_handler(msg, process_article_step)

def process_article_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        user_order_data.pop(message.chat.id, None)
        return

    user_order_data[message.chat.id]['article'] = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        user_order_data.pop(message.chat.id, None)
        return

    user_order_data[message.chat.id]['name'] = message.text
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
    bot.register_next_step_handler(msg, process_photo_step)

def process_photo_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        user_order_data.pop(message.chat.id, None)
        return

    if message.photo:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        unique_photo_name = f"{datetime.now().strftime('%Y%m%d%H%M%S')}_{message.photo[-1].file_id}.jpg"
        photo_path = os.path.join(photo_dir, unique_photo_name)
        with open(photo_path, 'wb') as photo_file:
            photo_file.write(downloaded_file)
        user_order_data[message.chat.id]['photo'] = unique_photo_name

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton('–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç'))
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å).", reply_markup=markup)
        bot.register_next_step_handler(msg, process_description_step)
    else:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
        bot.register_next_step_handler(msg, process_photo_step)

def process_description_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        user_order_data.pop(message.chat.id, None)
        return

    if message.text == '–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç':
        user_order_data[message.chat.id]['description'] = ""
    else:
        user_order_data[message.chat.id]['description'] = message.text

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, process_price_step)

def process_price_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        user_order_data.pop(message.chat.id, None)
        return

    user_order_data[message.chat.id]['price'] = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ (–ù–∞–ø—Ä–∏–º–µ—Ä: 38 40 42 44)")
    bot.register_next_step_handler(msg, process_sizes_step)

def process_sizes_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        user_order_data.pop(message.chat.id, None)
        return

    user_order_data[message.chat.id]['sizes'] = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º.")
    bot.register_next_step_handler(msg, process_post_link_step)

def process_post_link_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        user_order_data.pop(message.chat.id, None)
        return

    user_order_data[message.chat.id]['post_link'] = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–ø—Ä–∏–º–µ—Ä: Nike, Adidas, Salomon, New Balance).")
    bot.register_next_step_handler(msg, process_brand_step)

def process_brand_step(message):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞':
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        user_order_data.pop(message.chat.id, None)
        return

    user_order_data[message.chat.id]['brand'] = message.text
    save_to_excel(message.chat.id)
    bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
    user_order_data.pop(message.chat.id, None)

def save_to_excel(chat_id):
    data = user_order_data[chat_id]
    new_row = [
        data['article'],
        data['name'],
        data['photo'],
        data['description'],
        data['price'],
        data['sizes'],
        data['post_link'],
        data['brand']
    ]
    sheet.append(new_row)
    wb.save("database.xlsx")

@bot.message_handler(commands=['send'])
def send(message):
    if message.chat.id in admin_id:
        admin_state[message.chat.id] = "awaiting_message"
        admin_media[message.chat.id] = {"photos": [], "caption": None, "text": None}

        markup = types.InlineKeyboardMarkup()
        button_cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='cancel_broadcast')
        button_sendall = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send_all')
        markup.add(button_cancel, button_sendall)

        bot.send_message(message.chat.id,
                         "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'.",
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.message_handler(content_types=['text', 'photo'])
def handle_message(message):
    if message.chat.id in admin_state and admin_state[message.chat.id] == "awaiting_message":
        if message.content_type == 'photo':
            admin_media[message.chat.id]["photos"].append(types.InputMediaPhoto(message.photo[-1].file_id))
            if message.caption:
                admin_media[message.chat.id]["caption"] = message.caption
        elif message.content_type == 'text':
            admin_media[message.chat.id]["text"] = message.text


@bot.callback_query_handler(func=lambda call: call.data == 'send_all')
def send_all(call):
    if call.message.chat.id in admin_id and call.message.chat.id in admin_state:
        if not admin_media[call.message.chat.id]["photos"] and not admin_media[call.message.chat.id]["text"]:
            bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        else:
            chat_ids = [row[0] for row in users_chat_id.iter_rows(min_row=2, max_col=1, values_only=True)]
            if admin_media[call.message.chat.id]["photos"]:
                media_group = admin_media[call.message.chat.id]["photos"]
                if admin_media[call.message.chat.id]["caption"]:
                    media_group[0].caption = admin_media[call.message.chat.id]["caption"]
                for chat_id in chat_ids:
                    bot.send_media_group(chat_id, media_group)
            elif admin_media[call.message.chat.id]["text"]:
                for chat_id in chat_ids:
                    bot.send_message(chat_id, admin_media[call.message.chat.id]["text"])

            admin_state.pop(call.message.chat.id)
            admin_media.pop(call.message.chat.id)
            bot.send_message(call.message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_broadcast')
def cancel_broadcast(call):
    if call.message.chat.id in admin_state:
        admin_state.pop(call.message.chat.id)
        admin_media.pop(call.message.chat.id)
        bot.send_message(call.message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
@bot.callback_query_handler(func=lambda callback: callback.data == 'search_menu')
def search_menu(callback):
    markup = types.InlineKeyboardMarkup()
    button_article = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É", callback_data='search_by_article')
    button_size = types.InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É", callback_data='search_by_size')
    button_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')
    markup.add(button_article, button_size)
    markup.add(button_back)

    bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data == 'search_by_article')
def search_by_article(callback):
    markup = types.InlineKeyboardMarkup()
    button_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')
    markup.add(button_back)

    sent_message = bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)
    bot.register_next_step_handler(sent_message, handle_article_search)


def handle_article_search(message):
    article = message.text
    markup = types.InlineKeyboardMarkup()
    button_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')
    markup.add(button_back)

    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=1, max_col=1):
        if row[0].value == article:
            row_data = sheet[row[0].row]
            article, name, photo_name, description, price, sizes, link, brand = [cell.value for cell in row_data]
            photo_path = os.path.join(photo_dir, photo_name)

            caption = (f"{name}\n"
                       f"{description if description else ''}\n\n"
                       f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n\n"
                       f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n\n"
                       f"–†–∞–∑–º–µ—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ (EU): {sizes}\n\n"
                       f"[–ï—â—ë —Ñ–æ—Ç–æ...]({link})")

            markup = types.InlineKeyboardMarkup()
            button_order = types.InlineKeyboardButton("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'order_{article}')
            button_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')
            markup.add(button_order, button_back)

            if os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(message.chat.id, photo, caption=caption, parse_mode='Markdown', reply_markup=markup)
            else:
                bot.send_message(message.chat.id, caption, parse_mode='Markdown', reply_markup=markup)
            return

    bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data == 'search_by_size')
def search_by_size(callback):
    sizes = set()
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=6, max_col=6):
        if row[0].value:
            for size in row[0].value.split():
                sizes.add(size)

    markup = types.InlineKeyboardMarkup()
    for size in sizes:
        button = types.InlineKeyboardButton(size, callback_data=f'size_{size}')
        markup.add(button)
    button_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')
    markup.add(button_back)

    bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('size_'))
def show_catalog_by_size(callback):
    user_id = callback.from_user.id
    size = callback.data.split('_')[1]
    user_catalog_position[user_id] = {'size': size, 'index': 0}

    show_catalog_page_by_size(callback.message, user_id)


def show_catalog_page_by_size(message, user_id):
    catalog_info = user_catalog_position[user_id]
    size = catalog_info['size']
    index = catalog_info['index']

    rows = [
        (sheet[f'A{i}'].value, sheet[f'B{i}'].value, sheet[f'C{i}'].value, sheet[f'D{i}'].value, sheet[f'E{i}'].value,
         sheet[f'F{i}'].value, sheet[f'G{i}'].value)
        for i in range(2, sheet.max_row + 1)
        if size in (sheet[f'F{i}'].value or '').split()
    ]

    total_photos = len(rows)
    if total_photos == 0:
        bot.send_message(message.chat.id, f'–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {size}.')
        return

    if index < 0:
        index = total_photos - 1
    elif index >= total_photos:
        index = 0

    user_catalog_position[user_id]['index'] = index

    article, name, photo_name, description, price, sizes, link = rows[index]
    photo_path = os.path.join(photo_dir, photo_name)

    caption = (f"[[{index + 1} –∏–∑ {total_photos}]]\n\n"
               f"{name}\n"
               f"{description if description else ''}\n\n"
               f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n\n"
               f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n\n"
               f"–†–∞–∑–º–µ—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ (EU): {sizes}\n\n"
               f"[–ï—â—ë —Ñ–æ—Ç–æ...]({link})")

    markup = types.InlineKeyboardMarkup()
    button_prev = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'catalog_size_prev')
    button_next = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f'catalog_size_next')
    button_order = types.InlineKeyboardButton("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'order_{article}')
    button_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')
    markup.add(button_prev, button_next)
    markup.add(button_order)
    markup.add(button_back)

    if user_id in user_message_ids:
        for msg_id in user_message_ids[user_id]:
            try:
                bot.delete_message(message.chat.id, msg_id)
            except telebot.apihelper.ApiException as e:
                if e.error_code != 400:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    user_message_ids[user_id] = []

    if os.path.exists(photo_path):
        with open(photo_path, 'rb') as photo:
            sent_message = bot.send_photo(message.chat.id, photo, caption=caption, parse_mode='Markdown', reply_markup=markup)
            user_message_ids[user_id].append(sent_message.message_id)
    else:
        sent_message = bot.send_message(message.chat.id, caption, parse_mode='Markdown', reply_markup=markup)
        user_message_ids[user_id].append(sent_message.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == 'catalog_size_prev')
def catalog_size_prev(callback):
    user_id = callback.from_user.id
    user_catalog_position[user_id]['index'] -= 1
    show_catalog_page_by_size(callback.message, user_id)


@bot.callback_query_handler(func=lambda callback: callback.data == 'catalog_size_next')
def catalog_size_next(callback):
    user_id = callback.from_user.id
    user_catalog_position[user_id]['index'] += 1
    show_catalog_page_by_size(callback.message, user_id)


@bot.callback_query_handler(func=lambda callback: callback.data == 'show_brands')
def show_brands(callback):
    brands = set()
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=8, max_col=8):
        brand = row[0].value
        if brand:
            brands.add(brand)

    markup = types.InlineKeyboardMarkup()
    for brand in brands:
        button = types.InlineKeyboardButton(brand, callback_data=f'brand_{brand}')
        markup.add(button)
    button_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')
    markup.add(button_back)

    bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('brand_'))
def show_catalog(callback):
    user_id = callback.from_user.id
    brand = callback.data.split('_')[1]
    user_catalog_position[user_id] = {'brand': brand, 'index': 0}

    show_catalog_page(callback.message, user_id)


def show_catalog_page(message, user_id):
    catalog_info = user_catalog_position[user_id]
    brand = catalog_info['brand']
    index = catalog_info['index']

    rows = [
        (sheet[f'A{i}'].value, sheet[f'B{i}'].value, sheet[f'C{i}'].value, sheet[f'D{i}'].value, sheet[f'E{i}'].value,
         sheet[f'F{i}'].value, sheet[f'G{i}'].value)
        for i in range(2, sheet.max_row + 1)
        if sheet[f'H{i}'].value == brand
    ]

    total_photos = len(rows)
    if total_photos == 0:
        bot.send_message(message.chat.id, f'–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—Ä–µ–Ω–¥–∞ {brand}.')
        return

    if index < 0:
        index = total_photos - 1
    elif index >= total_photos:
        index = 0

    user_catalog_position[user_id]['index'] = index

    article, name, photo_name, description, price, sizes, link = rows[index]

    photo_path = os.path.join(photo_dir, photo_name)

    caption = (f"[[{index + 1} –∏–∑ {total_photos}]]\n\n"
               f"{name}\n"
               f"{description if description else ''}\n\n"
               f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n\n"
               f"–¶–µ–Ω–∞: {price} ‚ÇΩ\n\n"
               f"–†–∞–∑–º–µ—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ (EU): {sizes}\n\n"
               f"[–ï—â—ë —Ñ–æ—Ç–æ...]({link})")

    markup = types.InlineKeyboardMarkup()
    button_prev = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='catalog_prev')
    button_next = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data='catalog_next')
    button_order = types.InlineKeyboardButton("üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'order_{article}')
    button_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')
    markup.add(button_prev, button_next)
    markup.add(button_order)
    markup.add(button_back)

    if user_id in user_message_ids:
        for msg_id in user_message_ids[user_id]:
            try:
                bot.delete_message(message.chat.id, msg_id)
            except telebot.apihelper.ApiException as e:
                if e.error_code != 400:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    user_message_ids[user_id] = []

    if os.path.exists(photo_path):
        with open(photo_path, 'rb') as photo:
            sent_message = bot.send_photo(message.chat.id, photo, caption=caption, parse_mode='Markdown', reply_markup=markup)
            user_message_ids[user_id].append(sent_message.message_id)
    else:
        sent_message = bot.send_message(message.chat.id, caption, parse_mode='Markdown', reply_markup=markup)
        user_message_ids[user_id].append(sent_message.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == 'catalog_prev')
def catalog_prev(callback):
    user_id = callback.from_user.id
    user_catalog_position[user_id]['index'] -= 1
    show_catalog_page(callback.message, user_id)


@bot.callback_query_handler(func=lambda callback: callback.data == 'catalog_next')
def catalog_next(callback):
    user_id = callback.from_user.id
    user_catalog_position[user_id]['index'] += 1
    show_catalog_page(callback.message, user_id)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('order_'))
def callback_order(callback):
    article = callback.data.split('_')[1]
    user_order_data[callback.from_user.id] = {'article': article}

    markup = types.InlineKeyboardMarkup()
    row = next(row for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row, min_col=1, max_col=6) if row[0].value == article)
    sizes = row[5].value.split()
    for size in sizes:
        markup.add(types.InlineKeyboardButton(size, callback_data=f'select_size_{size}'))
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start'))

    bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('select_size_'))
def select_size(callback):
    global status_order
    status_order=True
    size = callback.data.split('_')[2]
    user_order_data[callback.from_user.id]['size'] = size
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data='start'))

    bot.send_message(callback.message.chat.id, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç –≤–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", reply_markup=markup)
    bot.register_next_step_handler(callback.message, handle_name)


def handle_name(message):
    global status_order
    if (status_order):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data='start'))
        user_order_data[message.from_user.id]['name'] = message.text
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_method_markup())


def delivery_method_markup():
    global status_order
    if (status_order):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°–î–≠–ö", callback_data='delivery_method_cdek'), types.InlineKeyboardButton("–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", callback_data='delivery_method_russian_post'))
        markup.add(types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data='start'))
        return markup


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('delivery_method_'))
def select_delivery_method(callback):
    global status_order
    if (status_order):
        if callback.data=="delivery_method_cdek":
            method="C–î–≠–ö"
        else:
            method = "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"
        user_order_data[callback.from_user.id]['delivery_method'] = method
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
        bot.register_next_step_handler(callback.message, handle_city)


def handle_city(message):
    global status_order
    if (status_order):
        user_order_data[message.from_user.id]['city'] = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏.")
        bot.register_next_step_handler(message, handle_address)


def handle_address(message):
    global status_order
    if (status_order):
        user_order_data[message.from_user.id]['address'] = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å.")
        bot.register_next_step_handler(message, handle_postcode)


def handle_postcode(message):
    global status_order
    if (status_order):
        user_order_data[message.from_user.id]['postcode'] = message.text
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79997778899).")
        bot.register_next_step_handler(message, handle_phone)


def handle_phone(message):
    global status_order
    if (status_order):
        user_order_data[message.from_user.id]['phone'] = message.text
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data='cod_yes'))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data='cod_no'))

        bot.send_message(message.chat.id, "–ü–æ—Å—ã–ª–∫–∞ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith('cod_'))
def handle_cod(callback):
    global status_order
    if (status_order):
        cod = callback.data.split('_')[1] == 'yes'
        user_order_data[callback.from_user.id]['cod'] = cod
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
        if not(cod):
            bot.send_message(callback.message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏/—á–µ–∫–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–∫–∞–∑–∞ @dtcaree (https://t.me/dtcaree).\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:\n\n–°–±–µ—Ä–±–∞–Ω–∫: 2202206780046103\n–¢–∏–Ω—å–∫–æ—Ñ—Ñ: 2200700766083710\n\n–ù–∞ –∏–º—è: –î–∞–Ω–∏–ª –ê–ª–µ–∫—Å–µ–µ–≤–∏—á –ê. (Akulov Danil)")
        bot.send_message(callback.message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–µ—Å–ª–∏ –µ—Å—Ç—å).", reply_markup=markup)
        bot.register_next_step_handler(callback.message, handle_comment)


def handle_comment(message):
    global status_order
    if (status_order):
        user_order_data[message.from_user.id]['comment'] = message.text
        confirm_order(message)




def confirm_order(message):
    global status_order
    if (status_order):
        chat_id = message.chat.id
        username = message.from_user.username
        user_link = f"https://t.me/{username}" if username else "N/A"
        id_user_link = "https://web.telegram.org/k/#" + str(chat_id)

        user_order_data[message.from_user.id]['user_link']=user_link
        user_order_data[message.from_user.id]['id_link']=id_user_link
        user_order_data[message.from_user.id]['first_name'] = message.chat.first_name
        user_order_data[message.from_user.id]['last_name'] = message.chat.last_name

        try:
            order_data = user_order_data[chat_id]
        except KeyError:
            return
        article = order_data['article']
        size = order_data['size']
        name = order_data['name']
        delivery_method = order_data['delivery_method']
        city = order_data.get('city', '')
        address = order_data['address']
        postcode = order_data['postcode']
        phone = order_data['phone']
        cod = '–î–∞' if order_data['cod'] else '–ù–µ—Ç'
        comment = order_data.get('comment', '')

        confirmation_text = (f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
                             f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {name}\n"
                             f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n"
                             f"–†–∞–∑–º–µ—Ä: {size}\n"
                             f"–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n"
                             f"–ì–æ—Ä–æ–¥: {city}\n"
                             f"–ê–¥—Ä–µ—Å: {address}\n"
                             f"–ò–Ω–¥–µ–∫—Å: {postcode}\n"
                             f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                             f"–ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {cod}\n"
                             f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_order'))
        markup.add(types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data='start'))

        bot.send_message(message.chat.id, confirmation_text, reply_markup=markup)

def generate_order_number():
    order_numbers = [cell.value for cell in order_sheet['O'][1:] if cell.value is not None]
    return max(order_numbers) + 1 if order_numbers else 1

@bot.callback_query_handler(func=lambda callback: callback.data == 'confirm_order')
def complete_order(callback):
    global status_order
    if status_order:
        order_data = user_order_data.pop(callback.from_user.id, None)
        if order_data['user_link'] == "N/A":
            bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ @dtcaree (https://t.me/dtcaree), —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è. –°–ø–∞—Å–∏–±–æ!")
        if order_data:
            order_number = generate_order_number()
            new_row = [order_data['name'], "", order_data['article'], order_data['size'], order_data['delivery_method'], order_data.get('city', ''),
                       order_data['address'], order_data['postcode'], order_data['phone'], "", '–î–∞' if order_data['cod'] else '–ù–µ—Ç',
                       order_data.get('comment', ''), order_data['user_link'],order_data['id_link'], order_number, order_data['first_name'],order_data['last_name']]
            bot.send_message(admin_id[1], f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
                                          f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n"
                                          f"–§–ò–û:{order_data['name']}\n"
                                          f"–ê—Ä—Ç–∏–∫—É–ª:{order_data['article']}\n"
                                          f"–†–∞–∑–º–µ—Ä: {order_data['size']}\n"
                                          f"–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_method']}\n"
                                          f"–ì–æ—Ä–æ–¥: {order_data.get('city', '')}\n"
                                          f"–ê–¥—Ä–µ—Å: {order_data['address']}\n"
                                          f"–ò–Ω–¥–µ–∫—Å: {order_data['postcode']}\n"
                                          f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n"
                                          f"–ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {'–î–∞' if order_data['cod'] else '–ù–µ—Ç'}\n"
                                          f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_data.get('comment', '')}\n"
                                          f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {order_data['user_link']}\n"
                                          f"–ù–∏–∫ –≤ —Ç–≥: {order_data['first_name']} {order_data['last_name']}")
            order_sheet.append(new_row)
            wb.save("database.xlsx")

            bot.send_message(callback.message.chat.id, f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {order_number}", reply_markup=types.ReplyKeyboardRemove())
        else:
            bot.send_message(callback.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.",reply_markup=types.ReplyKeyboardRemove())
        back_to_start(callback)

@bot.callback_query_handler(func=lambda callback: callback.data == 'start')
def back_to_start(callback):
    start(callback.message)

bot.polling(none_stop=True)